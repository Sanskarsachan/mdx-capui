# **Capui - A Reusable React Component Library**

Welcome to **Capui**, a delightful and intuitive **React component library** that combines the power of **MDX documentation**, the sleekness of **Tailwind CSS**, and the safety of **TypeScript**. This library provides a modular approach to UI components, making it easy to implement, extend, and maintain across any project.

**Ready to make your React development process a breeze?** Let’s dive right into how **Capui** works, how to build it, and how to document everything with ease.

---

## **🚀 Overview**

Capui isn’t just another component library. It’s a **modular** and **dynamic** toolkit designed to help you quickly create beautiful UI elements while maintaining consistency across your projects. Powered by **MDX**, **Tailwind CSS**, and **TypeScript**, Capui gives you everything you need to create stunning and reusable components, with great documentation, all in one package.

### **Features at a Glance**
- **Reusable Components**: Build once, use anywhere.
- **Interactive MDX Docs**: Documentation that comes alive.
- **Tailwind CSS**: Utility-first styling that adapts to your needs.
- **TypeScript**: Type safety to ensure a smooth and bug-free development experience.
- **Publish to NPM**: Share your components with the world!

---

## **🛠️ Project Setup**

### **Step 1: Set Up Your Environment**

To kick things off, you'll need to set up your development environment. Here’s how:

1. **Initialize your React project with TypeScript**:
   ```bash
   npx create-react-app capui --template typescript
   cd capui
   ```

2. **Install Core Dependencies**:
   - **Tailwind CSS**: For seamless styling.
   - **MDX**: For creating dynamic and interactive documentation.
   - **PostCSS**: To integrate Tailwind.

   ```bash
   npm install tailwindcss postcss autoprefixer @mdx-js/react @mdx-js/loader
   ```

3. **(Optional) Add Next.js**:
   If you're building a static site, you may want to integrate **Next.js** for better SSR (Server-Side Rendering) and static export.

   ```bash
   npm install next
   ```

4. **Install React Icons** (Optional):
   To enrich your UI components, install the `react-icons` package.

   ```bash
   npm install react-icons
   ```

---

### **Step 2: Tailwind CSS Configuration**

Let’s get Tailwind CSS ready for your project:

1. **Generate Tailwind Config**:
   Run the following command to generate the `tailwind.config.js` file.

   ```bash
   npx tailwindcss init
   ```

2. **Global Styles**:
   Create a `global.css` file inside `src/styles/` and add this code to enable Tailwind’s base, components, and utilities.

   ```css
   @tailwind base;
   @tailwind components;
   @tailwind utilities;
   ```

3. **Import the Styles**:
   Don’t forget to import this CSS file into `src/index.tsx` to apply Tailwind globally.

   ```tsx
   import './styles/global.css';
   ```

---

## **🎨 Component Creation**

Now that your project is set up, let's start building components!

### **Button Component Example**

The Button component is the cornerstone of any UI library. Here’s how you can create a **Button** component:

1. **Create `Button.tsx`**:
   - This component accepts a `variant` prop to switch between primary and secondary styles.

   ```tsx
   // src/components/Button.tsx
   import React from 'react';

   type ButtonProps = {
     variant?: 'primary' | 'secondary';
     children: React.ReactNode;
   };

   const Button: React.FC<ButtonProps> = ({ variant = 'primary', children }) => (
     <button
       className={`px-4 py-2 rounded ${
         variant === 'primary' ? 'bg-blue-500' : 'bg-gray-500'
       } text-white`}
     >
       {children}
     </button>
   );

   export default Button;
   ```

2. **Create MDX Documentation for the Button**:
   Each component should have an interactive MDX documentation file. Let’s create `button.mdx`.

   ```mdx
   import { Button } from '../components/Button';

   # Button Component

   This button comes with two variants: `primary` and `secondary`.

   ## Usage

   <Button variant="primary">Primary Button</Button>
   <Button variant="secondary">Secondary Button</Button>
   ```

   **Why MDX?**
   MDX allows you to **embed live React components inside your documentation**, so users can see the components in action as they read through your docs.

---

### **Create More Components**

Once the **Button** is done, you can start creating other components like **Input**, **Card**, and **Modal**. Follow the same pattern as the Button:
1. Create a new file under `src/components/`.
2. Write the component’s code with TypeScript types.
3. Document the component using MDX under `src/pages/`.

---

## **📖 Interactive Documentation with MDX**

MDX is where the magic happens. It allows you to write Markdown while embedding React components in it. For example, inside `button.mdx`, you can show live examples of how your Button component works.

Each component should have a corresponding MDX file that:
- Describes the component.
- Lists the props it accepts.
- Shows examples of how to use it interactively.

### **Benefits of MDX Docs**:
- **Live code**: Users can interact with your components right in the documentation.
- **Rich Markdown**: You can include headers, code blocks, lists, and more.
- **Component Showcases**: MDX makes your documentation as interactive as the component itself.

---

## **🔧 TypeScript Configuration**

TypeScript ensures that your components are type-safe, making it easier to catch errors early. For every component:
1. Define types for the **props**.
2. Export components using `export default`.

For instance, the **Button** component accepts a `variant` prop, which we type as `'primary' | 'secondary'` in the `ButtonProps` interface.

**Remember:** Always type the props of your components to ensure maximum developer happiness.

---

## **🧪 Testing Your Components**

Make sure everything is working as expected with some **unit tests**. Here’s a simple Jest setup:

1. **Install Jest**:
   ```bash
   npm install --save-dev jest @testing-library/react @testing-library/jest-dom
   ```

2. **Test the Button Component**:
   - Create a test file, `Button.test.tsx`, to test if the Button renders correctly.

   ```tsx
   import { render, screen } from '@testing-library/react';
   import Button from './Button';

   test('Button renders with correct text', () => {
     render(<Button variant="primary">Click Me</Button>);
     expect(screen.getByText('Click Me')).toBeInTheDocument();
   });
   ```

---

## **🚢 Building and Publishing**

### **Step 1: Build Your Project**

Once everything is set up, it’s time to build your component library.

1. **Run the build command**:
   ```bash
   npm run build
   ```

2. **Ensure Everything is Ready**:
   Before publishing, make sure that your components are correctly exported and all documentation is up-to-date.

### **Step 2: Publish to NPM**

If you want others to use your components, **publish** your library to **npm**.

1. **Login to npm**:
   ```bash
   npm login
   ```

2. **Publish the library**:
   ```bash
   npm publish
   ```

---

## **📂 Folder Structure**

To keep things neat and tidy, here’s how your project should be structured:

```plaintext
capui/
├── public/                       # Static assets like images and icons
├── src/
│   ├── components/               # Reusable React components
│   │   ├── Button.tsx            # Example component
│   │   ├── Input.tsx             # Another component
│   ├── styles/                   # Global Tailwind styles
│   │   └── global.css            # Tailwind styles
│   ├── pages/                    # MDX Documentation files
│   │   ├── button.mdx            # Button documentation
│   │   └── input.mdx             # Input documentation
├── tailwind.config.js            # Tailwind configuration
├── postcss.config.js             # PostCSS configuration for Tailwind
├── tsconfig.json                 # TypeScript configuration
├── next.config.js                # Next.js configuration for MDX (optional)
├── package.json                  # Project dependencies and scripts
├── .eslintrc.js                  # ESLint configuration
└── README.md                     # Project documentation
```

---

## **🌱 Future Enhancements**

1. **Add Storybook**: For isolated testing and showcasing of components.
2. **CI/CD Pipeline**: Automate builds and tests using GitHub Actions or another CI tool.
3. **Automated Documentation**: Use tools like TypeDoc to auto-generate documentation from your code.
4. **More Components**: Keep adding more components as your project grows.

---

## **🎉 Conclusion**

Capui is designed to be a **scalable**, **maintainable**, and **shareable** component library that anyone can use. With **MDX**-powered docs, **Tailwind CSS** for styling, and **TypeScript** for type safety, building beautiful and reusable components has never been easier.

Ready to build something great? **Let’s get started** with **Capui** today!

--- 

! Happy coding! 🎉